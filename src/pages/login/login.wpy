<template>
  <view class="login-page">
    <view class="mark" wx:if="{{autoLogin&&token!= ''}}">
      <view class="loader">Finwood</view>
    </view>
    <image mode="aspectFill" class="login-bg" src="../../images/loginBg.jpg"></image>
    <view class="login-wrapper">
      <image class="logo" src="../../images/logo.svg"></image>
      <form class="login-form">
        <view class="input-row">
          <input placeholder="请输入手机号" type="number" maxlength="11" @input="input" id="mobile" value="{{input.mobile}}" placeholder-class="placeholder" />
          <view class="iconfont icon-wode"></view>
        </view>
        <view class="input-row">
          <input placeholder="请输入登录密码" type="text" @input="input" id="password" value="{{input.password}}" password="true" placeholder-class="placeholder" />
          <view class="iconfont icon-mima"></view>
        </view>
        <button type="button" class="btn-login" @tap="login();">登录</button>
        <view class="login-link">
          <navigator class="left" hover-class="none" open-type="switchTab" url="/pages/home/index">返回首页</navigator>
          <navigator class="right" hover-class="none" url="./register">立即注册</navigator>
        </view>
      </form>
    </view>
    <toast />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import validate from '../../utils/Validate'
  import input from '../../mixins/input';
  import tips from '../../utils/Tips'
  import member_api from '../../api/member_module.js'
  import MD5 from '../../utils/MD5'
  import cache from '../../utils/Cache'
  import Toast from '../../components/toast'
  import {
    TOKEN,
    USER_INFO,
    USER_SPECICAL_INFO
  } from '../../utils/Constant'

  export default class Login extends wepy.page {
    config = {
      navigationBarTitleText: '登录'
    };
    mixins = [input];
    components = {
      toast: Toast
    };
    data = {
      input : {
        mobile:wepy.getStorageSync('userPhone'),
        password:''
      },
      autoLogin:true,
      token:''
    }
    onLoad({autoLogin}) {
      if(typeof(autoLogin) != 'undefined') {
        this.autoLogin = false;
      }
    }

    async onShow() {
      let openId = wepy.getStorageSync(USER_INFO).openId;
      let unionId = wepy.getStorageSync(USER_INFO).unionId;
      this.token = wepy.getStorageSync(TOKEN);
      this.$apply();
      if(this.autoLogin && this.token!= '') {
        let res = await wepy.login();
        if (res.code) {
          //用户code 换取 session_key
          let r = await member_api.miniprogramasessionid({
            code:res.code
          });
          wepy.setStorageSync(USER_SPECICAL_INFO, r.result.sessionId);
          //获取userInfo 
          (function getUserInfo() {
            wx.getUserInfo({
              withCredentials:true,
              success: async(e)=> {
                let r = await member_api.miniprogramauserinfo({
                  encrypteData:e.encryptedData,
                  iv:e.iv,
                  sessionId:wepy.getStorageSync(USER_SPECICAL_INFO)
                });
                if(r) {
                  wepy.setStorageSync(USER_INFO, r.result.userinfo);
                  cache.login(r.result.token);
                }
              },
              fail:()=> {
                Tips.modal('拒绝授权将无法体验小程序功能!').then(()=>{
                  wx.openSetting({
                    complete:()=> {
                      getUserInfo();
                    }
                  })
                })
              }
            });
          })();
        }
      }
    }

    methods = {
      async login() {
        if (!this.validate()) {
          return;
        }
        let r =await member_api.login({
          mobile:this.input.mobile,
          password:MD5.hex_md5(this.input.password),
          socialType:4,
          // openid:wepy.getStorageSync(USER_INFO).openid,
          // unionid:wepy.getStorageSync(USER_INFO).unionid
        })
        if(r.code == 0) {
          wepy.setStorageSync('userPhone',this.input.mobile);
          cache.login(r.result.token);
          if(!r.result.showHeadImg) {
            let userInfo = wepy.getStorageSync(USER_INFO);
            userInfo.headimg = '../../images/avatar.png';
            wepy.setStorageSync(USER_INFO,userInfo);
          }
        }else {
          tips.error(r.message);
        }
      }
    }

    validate() {
      const rules = [
        {
          value: this.input.mobile,
          method: 'optional',
          message: '请输入手机号'
        },
        {
          value: this.input.mobile,
          method: 'tel',
          message: '手机号格式不正确'
        },
        {
          value: this.input.password,
          method: 'optional',
          message: '请输入密码'
        }
      ];
      return this.check(rules);
    }

  }
</script>

<style lang="scss">
  @import "../../styles/mixin";
  .login-page{
    @include allcover;
  }
  .login-bg{
    width: 100%;
    height:100%;
  }
  .login-wrapper{
    position: absolute;
    left:0;
    top:0;
    width: 100%;
    height:100%;
    z-index:2;
  }
  .logo{
    display: block;
    margin: 148rpx auto 116rpx;
    height: 150rpx;
  }
  .login-form{
    display: block;
    padding:0 50rpx;
  }
  .input-row{
    position: relative;
    height: 88rpx;
    margin-bottom:40rpx;
    background-color: rgba(51,51,51,.4);
    border-radius: 4px;
  }
  .input-row>input{
    width: 100%;
    height: 88rpx;
    border-radius: 4rpx;
    border: none;
    background: transparent;
    color: #fff;
    font-size: $text-nm;
    padding:20rpx 30rpx 20rpx 98rpx;
    line-height: 48rpx;
    opacity: .8;
  }
  .input-row>.iconfont{
    font-size:32rpx;
    position: absolute;
    left:30rpx;
    top:50%;
    transform: translateY(-50%);
    color: #fff;
  }
  .btn-login{
    background-color: $primary;
    color: #fff;
    font-size:$text-xl;
    height:80rpx;
    margin-top:60rpx;
  }
  .placeholder{
    color: rgba(255,255,255,.8);
    font-size:$text-nm;
  }
  .login-link{
    @include fj;
    font-size:$text-nm;
    color: #fff;
    line-height:48rpx;
    margin-top:30rpx;
  }
  .mark {
    position: fixed;
    left: 50%;
    top: 0;
    width: 100%;
    height: 100vh;
	  transform: translateX(-50%);
    z-index: 9;
    background: #f5f5f5;
    .loader {
      display: inline-block;
      position: absolute;
      top: 40%;
      left:50%;
      transform: translate(-50%,-50%);
      padding: 5px 0;
      position: relative;
      font: normal 18px/1em Helvetica, Arial, sans-serif;
      text-transform: uppercase;
      color: #333;
      &:after {
				content: "";
				border-radius: 2px;
				animation: wormsPong cubic-bezier(0.77, 0, 0.175, 1) 0.8s infinite;
				background-color: #13ae2f;
				position: absolute;
				bottom: -6px;
				left: 0;
				width: 4px;
				height: 4px;
			}
    }

    @keyframes wormsPong {
      25% {
        width: 100%;
      }
      50% {
        width: 0;
        left: auto;
        right: 0;
      }
      75% {
        width: 100%;
      }
      100% {
        width: 0;
        right: auto;
        left: 0;
      }
    }
  }
</style>
